2021-03-03  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py (calc_entropy_drift, print_pop_stats)
	(advance_one_generation): switched the entropy calculation to a
	version more appropriate for drift mutations.

	* GA-poly-max.py: introduced an oscillation_scale parameter,
	commented at the top of the code.

	* GA-poly-max.py: experimented with parameters and changed to
	drift mutation instead of bitflip mutation.  The goal is to get a
	royal road, and the current parameters give us such a thing by
	jiggling in each local maximum for a while before finding the next
	higher peak.

2021-02-02  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: added the random seed setting for
	np.random.seed() (in addition to random.seed()) for reproducible
	runs.

2021-02-01  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: further adjustment of parameters to get a
	reasonable run with the new fitness function.

2021-01-31  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: adjusted parameters so that we get an evolution
	rich enough to start drawing conclusions on how it works.

2021-01-29  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: improved the plotting to allow separate y axes
	for fitness and entropy.

2021-01-28  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: further improvements in the user friendly
	plotting.  Plot instructions are now invoked with os.system() so
	that gnuplot makes a .pdf file, and a PDF viewer comes up with the
	plot.

	* GA-poly-max.py: added some convenience generating of output
	files with plot information, and started adding (not yet debugged)
	notes about how to make a plot.

2021-01-19  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py (calc_entropy): introduced a preliminary function
	which calculates the shannon entropy for the population by looking
	at the occupancy of each state in the population.
	(print_pop_stats): added a printing of the shannon entropy.

2021-01-02  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py (main): structured this main() function to have a
	simple flow of advancing one generation.  The main loop is now tiny.
	(advance_one_generation): new function to handle each generation.
	(print_pop_stats): new function which takes on the functionality
	of printing the fitness status at this point.
	(calc_pop_fitness): new function which calculates the fitness of
	the entire population.
	(print_pop): new function, not used right now, which prints out
	the current population.
	(print_metadata): new function which prints a starting metadata
	block for the program.

2020-12-28  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: adapted the crossover function to the current
	approach of using ieee representation of floating point numbers.
	Also separated out two separate approaches to mating: the mate
	that is intrinsically binary, and the one which does a simple
	drift on the floating point values.
