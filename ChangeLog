2021-03-24  Mark Galassi  <mark@galassi.org>

	* GA-entropy-paper.tex (subsection{Goals of the GA}): adjusted
	this section.

	* GA-entropy-paper.tex (subsection{The GA components and
	procedure}): started putting in material for this section.

	* GA-entropy-paper.tex (section*{Appendix: the code for the
	experiment}): added this appendix.

	* GA-func-max.py: renamed from GA-poly-max.py to Ga-func-max.py,
	since we now maximize arbitrary functions.

	* GA-entropy-slides.tex: reworked some of the GA slides.

	* GA-entropy-paper.tex: finished the portion on Shannon entropy
	for word sequences.

	* entropy_simple_example.py: cleaned up and improved output.

	* entropy_simple_example.py: new program to give a simple
	description of entropy.

	* GA-gen-info_pid3027915.out.pdf, GA-entropy-paper.tex: added
	another exmaple of evolution.

	* GA-entropy-paper.tex, GA-gen-info_pid3095791.out.pdf: some
	improvements to the figure.

	* GA-entropy-paper.tex (section{Approach}): started fleshing out
	this seciton.
	(section{Genetic algorithms in Brief}): added a brief intro
	section.

2021-03-22  Mark Galassi  <mark@galassi.org>

	* plot_ga_output.py: added a center panel which shows the log
	scale of the left panel plots.

	* GA-poly-max.py: set the entropy to be calculated based on the
	elite half of the population.

2021-03-21  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py (calc_entropy_drift): added an entropy function
	that covers a single range of numbers, so that entropies are more
	commensurate.

	* GA-poly-max.py: separated out the entropy calculation into
	selectable functions, so that now it is reported in the metadata.

	* plot_ga_output.py: adjusted sizes so that we now get a
	reasonable fit.

	* plot_ga_output.py (load_LEM, present_metadata): metadata is now
	in there, but the overall window size does not currently hold it
	in.

	* plot_ga_output.py: started moving toward a gridspec layout so I
	can add metadata information.

	* README.md: added some information on how to do runs and plots.

	* GA-poly-max.py: reintroduced some stashed changes that set
	function names for various entropy calculations, mutations, and
	initial distributions.

2021-03-20  Mark Galassi  <mark@galassi.org>

	* GA-entropy-slides.tex, README.md: a simple start to a beamer
	presentation.

	* GA-gen-info_pid3095791.out.pdf:
	* GA-gen-info_pid3095791.metadata: added a provisional reference
	figure.

	* README.md: added a bit more about how to generate the paper.

	* write_up.tex: some structural adaptation of the write-up.

2021-03-14  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: adjusted parameters to get some good entropy
	runs.  Also started modifying the drift entropy so that the range
	of x is a bit more uniform even when the population variety
	shrinks.  Also started commenting out the data frame plotting
	approach in favor of the separate program.

2021-03-10  Mark Galassi  <mark@galassi.org>

	* plot_ga_output.py (plot_runfile): added a plot for the position
	of the object.

	* plot_ga_output.py (plot_runfile): added a title to each plot
	window.  Also added saving this plot to a pdf file.

	* plot_ga_output.py: new program which loads the ouput files from
	GA-poly-max.py and gives a visualization.  At this time it shows
	two aligned plots of fitness vs. generation and entropy
	vs. generation.

2021-03-03  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py (calc_entropy_drift, print_pop_stats)
	(advance_one_generation): switched the entropy calculation to a
	version more appropriate for drift mutations.

	* GA-poly-max.py: introduced an oscillation_scale parameter,
	commented at the top of the code.

	* GA-poly-max.py: experimented with parameters and changed to
	drift mutation instead of bitflip mutation.  The goal is to get a
	royal road, and the current parameters give us such a thing by
	jiggling in each local maximum for a while before finding the next
	higher peak.

2021-02-02  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: added the random seed setting for
	np.random.seed() (in addition to random.seed()) for reproducible
	runs.

2021-02-01  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: further adjustment of parameters to get a
	reasonable run with the new fitness function.

2021-01-31  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: adjusted parameters so that we get an evolution
	rich enough to start drawing conclusions on how it works.

2021-01-29  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: improved the plotting to allow separate y axes
	for fitness and entropy.

2021-01-28  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: further improvements in the user friendly
	plotting.  Plot instructions are now invoked with os.system() so
	that gnuplot makes a .pdf file, and a PDF viewer comes up with the
	plot.

	* GA-poly-max.py: added some convenience generating of output
	files with plot information, and started adding (not yet debugged)
	notes about how to make a plot.

2021-01-19  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py (calc_entropy): introduced a preliminary function
	which calculates the shannon entropy for the population by looking
	at the occupancy of each state in the population.
	(print_pop_stats): added a printing of the shannon entropy.

2021-01-02  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py (main): structured this main() function to have a
	simple flow of advancing one generation.  The main loop is now tiny.
	(advance_one_generation): new function to handle each generation.
	(print_pop_stats): new function which takes on the functionality
	of printing the fitness status at this point.
	(calc_pop_fitness): new function which calculates the fitness of
	the entire population.
	(print_pop): new function, not used right now, which prints out
	the current population.
	(print_metadata): new function which prints a starting metadata
	block for the program.

2020-12-28  Mark Galassi  <mark@galassi.org>

	* GA-poly-max.py: adapted the crossover function to the current
	approach of using ieee representation of floating point numbers.
	Also separated out two separate approaches to mating: the mate
	that is intrinsically binary, and the one which does a simple
	drift on the floating point values.
